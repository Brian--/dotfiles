;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to
;; right.
;; Only the last :paths is kept and others are dropped.

{:aliases
   {:add {:extra-deps {find-deps
                         {:git/url "https://github.com/holyjak/find-deps.git",
                          :sha "88d60faf0db23cf4e2f8155ca82ae49fc6dea164"}},
          :main-opts ["-m" "find-deps.core" "-Fsave"]},
    :eastwood {:extra-deps #:jonase{eastwood #:mvn{:version "RELEASE"}},
               :main-opts ["-m" "eastwood.lint"
                           "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]},
    :nrepl {:main-opts ["-m" "nrepl.cmdline"]},
    :outdated {:extra-deps {antq #:mvn{:version "0.5.0"}},
               :main-opts ["-m" "antq.core"]},
    :rebel {:extra-deps #:com.bhauman{rebel-readline #:mvn{:version "0.1.4"}},
            :main-opts ["-m" "rebel-readline.main"]},
    :rebl-11
      {:extra-deps
         {org.clojure/core.async #:mvn{:version "0.6.532"},
          ;; deps for file datafication (0.9.149 or later)
          org.clojure/data.csv #:mvn{:version "0.1.4"},
          org.clojure/data.json #:mvn{:version "0.2.7"},
          org.yaml/snakeyaml #:mvn{:version "1.25"},
          com.cognitect/rebl
            #:local{:root "/home/brian/.local/lib/clojure/REBL-0.9.220.jar"},
          org.openjfx/javafx-fxml #:mvn{:version "11.0.2"},
          org.openjfx/javafx-controls #:mvn{:version "11.0.2"},
          org.openjfx/javafx-graphics #:mvn{:version "11.0.2"},
          org.openjfx/javafx-media #:mvn{:version "11.0.2"},
          org.openjfx/javafx-swing #:mvn{:version "11.0.2"},
          org.openjfx/javafx-base #:mvn{:version "11.0.2"},
          org.openjfx/javafx-web #:mvn{:version "11.0.2"}},
       ;; this ensures we have a DynamicClassLoader, which is needed for
       ;; add-lib to work, if we're starting other processes via aliases
       ;; such as a socket REPL or Cognitect's REBL etc
       :main-opts
         ["-e"
          "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
          "-m" "cognitect.rebl"]},
    :rebl-8
      {:extra-deps
         {org.clojure/core.async #:mvn{:version "0.6.532"},
          ;; deps for file datafication (0.9.149 or later)
          org.clojure/data.csv #:mvn{:version "0.1.4"},
          org.clojure/data.json #:mvn{:version "0.2.7"},
          org.yaml/snakeyaml #:mvn{:version "1.25"},
          com.cognitect/rebl
            #:local{:root "/home/brian/.local/lib/clojure/REBL-0.9.220.jar"}},
       ;; this ensures we have a DynamicClassLoader, which is needed for
       ;; add-lib to work, if we're starting other processes via aliases
       ;; such as a socket REPL or Cognitect's REBL etc
       :main-opts
         ["-e"
          "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"
          "-m" "cognitect.rebl"]}}}
